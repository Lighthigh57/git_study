[{"id":0,"href":"/header/","title":"オープニング","parent":"","content":""},{"id":1,"href":"/header/getting_started/","title":"はじめに","parent":"オープニング","content":"こんにちは！世界\n"},{"id":2,"href":"/section_1/","title":"Gitに入門しよう","parent":"","content":""},{"id":3,"href":"/section_1/history/","title":"結局Gitって何？","parent":"Gitに入門しよう","content":"Git とは     みんなが書くソースコードなどのファイルの変更履歴を管理する分散型バージョン管理システムのことを言います。\n下のように複数人で何か作ろうとしたときに、いい感じに変更履歴とかを残してくれます。\n逆に、変更を全部 Google docs とかでやったらどうなるか、考えてみましょう。\nGit の歴史     Git は、linux を作ったリナーストーバルスさんによって作られました。\nもともと linux カーネルのソースコード管理のために BitKeeper ってやつがあったらしいけど、いろいろ揉めてトーバルスさんが自分で作ることになったらしいです。\n"},{"id":4,"href":"/section_1/settings/","title":"Gitを使えるようにしよう","parent":"Gitに入門しよう","content":"では、自分の PC で Git を使えるようにインストールしましょう\nmac 編     なんと！最初っから入っています。\nなんらかのターミナルを開いて、以下のコマンドを打ってみましょう。\n\u0026gt; git --version インストールされている Git のバージョンが出力されると思います。もしインストールされていなければ、command not foundみたいな出力になると思います。\nWindows 編     ここから Git をインストールします。いろいろ modal が出てくるのでポチポチしてください。\n終わったら、Git bashというアプリケーションが入っていると思います。開いてみましょう。あったら、以下のようなコマンドを叩いてみましょう。\n\u0026gt; git --version 何かバージョンが出力されていたら OK!\nGithub のアカウントを作ろう     Github とは     Git を利用して、世界中のコードを保存したり公開したりできるサービスです。いろんな企業のサービスのコードを見る事ができます。\nGithub にコードを保存して、複数人で Github に変更を伝えたりするイメージです。。コードの変更だけでなく、共同開発に適した機能が多く搭載されています。\nアカウントを作りましょう     ここから sign up して登録します。\n自分の環境に設定を加えよう     自分の Github のアカウントをローカルに紐付けます。 以下のコマンドを入力してください。\n\u0026gt; git config --global user.name \u0026quot;先ほど登録したユーザー名\u0026quot; \u0026gt; git config --global user.email \u0026quot;先ほど登録したメールアドレス\u0026quot; これで設定が完了しました。やったね！\n"},{"id":5,"href":"/section_2/","title":"Gitの基礎を学ぼう","parent":"","content":""},{"id":6,"href":"/section_2/concept/","title":"リポジトリを作ってみよう","parent":"Gitの基礎を学ぼう","content":"ここまできたら、あとはコマンドを使えるようになるだけです。そんな難しくないですよ！\nGit を使えるようになるにあたって、リポジトリィというのはとても重要な概念です。\nリポジトリとは、以下のようにバージョンを管理するプロジェクトごとに作られ、その中の各ファイルの変更履歴の他、issue やブランチの情報が入っています。\n下のように、各エンジニアは Github 上にある（自分で作った）リポジトリを自分の PC に取り込み（cloneと言います）、リポジトリの中のファイルを変更してそれを Github に送ります（pushといいます）。\nさあ、やってみよう！     Github 上に repository を作ってみましょう。以下のメニューにあるNew repositoryをクリックします。\n以下にリポジトリ名や、世の中に公開するか許可した人じゃないとみれないようにするか（plivateかpublicか）などを選択します。\nできた！\nローカルにリポジトリを作る     何らかのファイルが入っているディレクトリを用意します。例えば、\n\u0026gt; ls hoge.txt huga.png みたいな感じ。その状態で、以下のコマンドを打ちます。（上記画像に指定されているのと同じです）\n\u0026gt; git init \u0026gt; git add . \u0026gt; git commit -m \u0026quot;initial commit\u0026quot; \u0026gt; git branch -M main // [自分の作ったリポジトリのURL].git です。 \u0026gt; git remote add origin https://github.com/hogehoge/hugahuga.git \u0026gt; git push -u origin main できたら、先ほど作ったリポジトリのページにアクセスしてください。ファイルが公開されていますか。\n"},{"id":7,"href":"/section_2/detail/","title":"基礎的なコマンドを理解しよう","parent":"Gitの基礎を学ぼう","content":"ここで、リポジトリを作る際に使った基礎的なコマンドについて紹介します。自分の変更をリモートに反映させたい時は、local のレポジトリに変更を加え、それを remote リポジトリに反映させる、という流れになります。\nadd     変更を加えたいファイルをインデックスまたはステージングに追加します。git add .とすると、変更しているファイル全てをインデックスに追加することができます。\ncommit     インデックスに追加されているファイルをリポジトリに反映させるコマンドです。commit にはメッセージを添付する必要があります。こんな記事もあります。\npush     ローカルリポジトリの変更をリモートリポジトリに反映させます。\nこれであなたも git 使えるようになりましたね！\n"},{"id":8,"href":"/section_2/branch/","title":"ブランチについて理解しよう","parent":"Gitの基礎を学ぼう","content":"Git を使えるようになるにあたって、branchは最も重要な仕組みの 1 つです。\nブランチというのは、レポジトリの変更を分岐しながら残していくためのものです。\n複数人が同時並行で開発する時、ある人の変更と自分の変更が被ったりしたらよく分からなくなってしまいます。\nブランチを分岐しながら開発していき、その後メインのブランチに反映させることで、そのような課題をなくすことができます。\n(引用: https://cloudsmith.co.jp/blog/efficient/2020/08/1534208.html)\n新しくリポジトリを作成した時、メインのリポジトリはmainという名前になっています。ここから、とある作業を行いたい時は別のブランチに行って作業を行い、そのままリモートのリポジトリにそれを伝えます。\nその後、あなたの作業が承認されたら、mainにあなたの変更を反映する、といった流れで開発することで、一番メインの状態が安全に担保される形になります。\nコマンドを理解しよう     checkout     別のブランチに移動するコマンドです。例えば、mainブランチにいる際に違う作業をするブランチに移動したかったら\n\u0026gt; git checkout [ブランチ名] とすることで移動できます。\nここから新しくブランチを作って移動したい、ということがあれば\n\u0026gt; git checkout -b [新しいブランチ名] としてください。\nmerge     ローカルリポジトリにて、別のブランチの状態を今のブランチに反映させたい際には、今のブランチにいる状態で\n\u0026gt; git merge [別ブランチ名] とすれば反映されます。\npull     リモートリポジトリのあるブランチの状態が誰かによって変更されて、自分のローカルリポジトリと状態が異なっている場合、\n\u0026gt; git pull origin [ブランチ名] とすることで、そのブランチの最新状態（リモートリポジトリの状態）を取り込むことができます。\n"},{"id":9,"href":"/section_3/","title":"実践的に使ってみよう","parent":"","content":""},{"id":10,"href":"/section_4/","title":"応用的な運用を知ろう","parent":"","content":""},{"id":11,"href":"/","title":"","parent":"","content":""},{"id":12,"href":"/tags/","title":"Tags","parent":"","content":""}]