<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://git-study.web.app/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://git-study.web.app/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>はじめに</title>
      <link>https://git-study.web.app/header/getting_started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://git-study.web.app/header/getting_started/</guid>
      <description>このサイトは、未完 Labo が主催のイベント「Git 勉強会 / 共同開発のノウハウを知ろう」の公開資料です。静的サイトジェネレータのHugoが用いられており、hosting は firebase に行っています。
コードが以下に公開されています。contribute を歓迎します。README にまだフローがまとまっていないので、随時更新いたします。 https://github.com/mikan-project/git_study</description>
    </item>
    
    <item>
      <title>結局Gitって何？</title>
      <link>https://git-study.web.app/section_1/history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://git-study.web.app/section_1/history/</guid>
      <description>Git とは     みんなが書くソースコードなどのファイルの変更履歴を管理する分散型バージョン管理システムのことを言います。
下のように複数人で何か作ろうとしたときに、いい感じに変更履歴とかを残してくれます。
逆に、変更を全部 Google docs とかでやったらどうなるか、考えてみましょう。
Git の歴史     Git は、linux を作ったリナーストーバルスさんによって作られました。
もともと linux カーネルのソースコード管理のために BitKeeper ってやつがあったらしいけど、いろいろ揉めてトーバルスさんが自分で作ることになったらしいです。</description>
    </item>
    
    <item>
      <title>Gitを使えるようにしよう</title>
      <link>https://git-study.web.app/section_1/settings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://git-study.web.app/section_1/settings/</guid>
      <description>では、自分の PC で Git を使えるようにインストールしましょう
mac 編     なんと！最初っから入っています。
なんらかのターミナルを開いて、以下のコマンドを打ってみましょう。
&amp;gt; git --version インストールされている Git のバージョンが出力されると思います。もしインストールされていなければ、command not foundみたいな出力になると思います。
Windows 編     ここから Git をインストールします。いろいろ modal が出てくるのでポチポチしてください。
終わったら、Git bashというアプリケーションが入っていると思います。開いてみましょう。あったら、以下のようなコマンドを叩いてみましょう。
&amp;gt; git --version 何かバージョンが出力されていたら OK!
Github のアカウントを作ろう     Github とは     Git を利用して、世界中のコードを保存したり公開したりできるサービスです。いろんな企業のサービスのコードを見る事ができます。
Github にコードを保存して、複数人で Github に変更を伝えたりするイメージです。。コードの変更だけでなく、共同開発に適した機能が多く搭載されています。
アカウントを作りましょう     ここから sign up して登録します。
自分の環境に設定を加えよう     自分の Github のアカウントをローカルに紐付けます。 以下のコマンドを入力してください。</description>
    </item>
    
    <item>
      <title>リポジトリを作ってみよう</title>
      <link>https://git-study.web.app/section_2/concept/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://git-study.web.app/section_2/concept/</guid>
      <description>ここまできたら、あとはコマンドを使えるようになるだけです。そんな難しくないですよ！
Git を使えるようになるにあたって、リポジトリィというのはとても重要な概念です。
リポジトリとは、以下のようにバージョンを管理するプロジェクトごとに作られ、その中の各ファイルの変更履歴の他、issue やブランチの情報が入っています。
下のように、各エンジニアは Github 上にある（自分で作った）リポジトリを自分の PC に取り込み（cloneと言います）、リポジトリの中のファイルを変更してそれを Github に送ります（pushといいます）。
さあ、やってみよう！     Github 上に repository を作ってみましょう。以下のメニューにあるNew repositoryをクリックします。
以下にリポジトリ名や、世の中に公開するか許可した人じゃないとみれないようにするか（plivateかpublicか）などを選択します。
できた！
ローカルにリポジトリを作る     何らかのファイルが入っているディレクトリを用意します。例えば、
&amp;gt; ls hoge.txt huga.png みたいな感じ。その状態で、以下のコマンドを打ちます。（上記画像に指定されているのと同じです）
&amp;gt; git init &amp;gt; git add . &amp;gt; git commit -m &amp;quot;initial commit&amp;quot; &amp;gt; git branch -M main // [自分の作ったリポジトリのURL].git です。 &amp;gt; git remote add origin https://github.com/hogehoge/hugahuga.git &amp;gt; git push -u origin main できたら、先ほど作ったリポジトリのページにアクセスしてください。ファイルが公開されていますか。</description>
    </item>
    
    <item>
      <title>基礎的なコマンドを理解しよう</title>
      <link>https://git-study.web.app/section_2/detail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://git-study.web.app/section_2/detail/</guid>
      <description>ここで、リポジトリを作る際に使った基礎的なコマンドについて紹介します。自分の変更をリモートに反映させたい時は、local のレポジトリに変更を加え、それを remote リポジトリに反映させる、という流れになります。
add     変更を加えたいファイルをインデックスまたはステージングに追加します。git add .とすると、変更しているファイル全てをインデックスに追加することができます。
commit     インデックスに追加されているファイルをリポジトリに反映させるコマンドです。commit にはメッセージを添付する必要があります。こんな記事もあります。
push     ローカルリポジトリの変更をリモートリポジトリに反映させます。
これであなたも git 使えるようになりましたね！</description>
    </item>
    
    <item>
      <title>ブランチについて理解しよう</title>
      <link>https://git-study.web.app/section_2/branch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://git-study.web.app/section_2/branch/</guid>
      <description>Git を使えるようになるにあたって、branchは最も重要な仕組みの 1 つです。
ブランチというのは、レポジトリの変更を分岐しながら残していくためのものです。
複数人が同時並行で開発する時、ある人の変更と自分の変更が被ったりしたらよく分からなくなってしまいます。
ブランチを分岐しながら開発していき、その後メインのブランチに反映させることで、そのような課題をなくすことができます。
(引用: https://cloudsmith.co.jp/blog/efficient/2020/08/1534208.html)
新しくリポジトリを作成した時、メインのリポジトリはmainという名前になっています。ここから、とある作業を行いたい時は別のブランチに行って作業を行い、そのままリモートのリポジトリにそれを伝えます。
その後、あなたの作業が承認されたら、mainにあなたの変更を反映する、といった流れで開発することで、一番メインの状態が安全に担保される形になります。
コマンドを理解しよう     checkout     別のブランチに移動するコマンドです。例えば、mainブランチにいる際に違う作業をするブランチに移動したかったら
&amp;gt; git checkout [ブランチ名] とすることで移動できます。
ここから新しくブランチを作って移動したい、ということがあれば
&amp;gt; git checkout -b [新しいブランチ名] としてください。
merge     ローカルリポジトリにて、別のブランチの状態を今のブランチに反映させたい際には、今のブランチにいる状態で
&amp;gt; git merge [別ブランチ名] とすれば反映されます。
pull     リモートリポジトリのあるブランチの状態が誰かによって変更されて、自分のローカルリポジトリと状態が異なっている場合、
&amp;gt; git pull origin [ブランチ名] とすることで、そのブランチの最新状態（リモートリポジトリの状態）を取り込むことができます。</description>
    </item>
    
    <item>
      <title>開発の流れ</title>
      <link>https://git-study.web.app/section_3/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://git-study.web.app/section_3/introduction/</guid>
      <description>何となく基礎についてわかってきたところで、実際に世の中に公開されているサービスを修正して git で反映させてみましょう。
皆さんが修正するのは、この資料です。 URL: https://github.com/mikan-project/git_study
この資料は不完全で、資料の充実をさせていくだけでなく、typo ミスなど、改善点が多くあります。
 何かプロジェクトを修正して反映させようとすると、以下がよくある流れだと思います。
 issue を発行する  どんなバグがあるか、あるいはどんな課題を解決したいのか、どんな機能を追加したいのか、など（粒度はチームによって様々だし、いろんな使い方があります。）   ローカルが最新状態であることを確認して、ブランチを切る  これです ブランチを新しく生やすことを「ブランチを切る」と言ったりします。命名については後ほど。とりあえずなんでもいいと思います。   いろいろ修正する。 commit -&amp;gt; push する。 pull request を出す。  リモートリポジトリにて、とあるブランチの変更をあるブランチに反映させたい時は、pull request を送ります。   pull request が良ければマージ（反映）  </description>
    </item>
    
    <item>
      <title>Githubの実践的な使い方</title>
      <link>https://git-study.web.app/section_4/github/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://git-study.web.app/section_4/github/</guid>
      <description>さて、git についてある程度理解し、contribute できたところで、より実践的な手法について学んでいきましょう。
まずは、Github についてです。
Github Actions     この説明のためには、まず CI/CDについて理解しておく必要があります。Circle Ci とか聞いたことがある方もいらっしゃるかもしれません。同じようなものです。
  CI は、Continuous Integration の略で、継続的インテグレーションと訳されます。 チーム開発の際に複数のブランチで並行作業が行われるとします。その際、それぞれで「build が正常に行くこと」や「意図した挙動を正常に示すこと（テストが通ること）」を検証しながら進めていく必要があります。
例えば「PR を発行した時」や「リモートリポジトリに push した時」に自動で CI を検証することで、コードの安全性を担保したり、開発効率化をすることができます。
  CD は、Continuous Deployment の略で、継続的デプロイメントと訳されます。 これは、CI を自動で行うだけでなく、その後のリリースまでも自動化する、ということです。
  Github Actions というのは、PR や commit をトリガーとして、CI/CD を自動で行ってくれるサービスになります。主にリポジトリごとに設定します。例えば以下のような感じです。
.github/workflows/deploy.yml
 name: CI on: push: branches: [ main ] // mainブランチにpushされた時（マージされた時） jobs: deploy: name: Deploy to Firebase runs-on: ubuntu-latest // 最新のubuntuコンテナで実行させます steps: - name: Checkout Repo uses: actions/checkout@v1 - name: setup Node uses: actions/setup-node@v1 // nodeの設定をしてくれる with: node-version: 16.</description>
    </item>
    
    <item>
      <title>ブランチの運用方法</title>
      <link>https://git-study.web.app/section_4/branch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://git-study.web.app/section_4/branch/</guid>
      <description>ブランチの基礎について勉強しましたが、どう使っていけばいいかわかりづらいと思います。ここでは、branch の実践的に運用方法の例について紹介します。これは数人以上のプロジェクトに適していることが多く、逆に個人開発では意識する必要がありません。
 有名なものとして、Github Flow と Git Flow と呼ばれるものがあります。
Git Flow     参考はこちら
Git Flow は、かなり複雑なモデルです。慎重で決まったリリースを行うプロダクト（モバイルアプリ）などに適していると言われています。
開発用ブランチ（develop ブランチ）と作業ブランチ（feature/hogehoge とする命名が良いと思います）をベースに開発を進め、release ブランチでリリース確認を行い、問題なければ master にマージする手法です。
Github Flow     Git Flow に比べてシンプルなモデルです。
Git Flow では develop ブランチから作業するのに対し、これは main ブランチからブランチを切ります。Git Flow の develop ブランチは常に正しいコードではなく、作業ブランチで徐々に不安点を解消していきながら release と向かっていく一方で、Github Flow は main ブランチが問題なく動くことを担保させなければいけないので、慎重にマージしていくことになります。
そのため、PR を多用してレビューすることになります。
ここでは 2 種類の主なモデルを紹介しましたが、実際には良いところを混合させたり、staging の運用等チーム状況を踏まえた設計になることが多いです。</description>
    </item>
    
  </channel>
</rss>
